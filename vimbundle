#!/usr/bin/env python
import os
import argparse

AVAILABLE_BUNDLES_DIRNAME = 'bundle-available'
ENABLED_BUNDLES_DIRNAME = 'bundle-enabled'

get_vim_path = lambda: os.path.join(os.environ.get('HOME'), '.vim')
get_default_config_path = lambda: os.path.join(get_vim_path(),
        'vim_bundler.json')

COMMANDS = {}


def register_command(cmd_name=None, pool=COMMANDS):

    def decorator(function):
        if cmd_name is None:
            pool[function.__name__] = function
        else:
            pool[cmd_name] = function
        return function

    return decorator


def get_action_by_name(cmd_name):
    action = COMMANDS.get(cmd_name)
    if action is None:
        raise ValueError("No action defined for given name: %s" % cmd_name)

    return action


def _print_dir_listing(dirname):
    print '\n'.join(sorted(get_bundles(dirname)))


@register_command()
def list_enabled(enabled_bundles_dir, **kwargs):
    _print_dir_listing(enabled_bundles_dir)


@register_command()
def list_available(available_bundles_dir, enabled_bundles_dir, **kwargs):
    available = get_bundles(available_bundles_dir)
    enabled = set(get_bundles(enabled_bundles_dir))

    bundles = (b if b not in enabled else '*' + b for b in sorted(available))
    print '\n'.join(bundles)


def get_bundles(dirname):
    return os.listdir(dirname)


@register_command()
def enable(to_enable, available_bundles_dir, enabled_bundles_dir, **kwargs):
    available_bundles = get_bundles(available_bundles_dir)
    if to_enable not in available_bundles:
        raise ValueError("Required bundle not found: %s; To show a list of "
                "available bundles, try list_available subcommand" % to_enable)

    available_path = os.path.join('..', AVAILABLE_BUNDLES_DIRNAME, to_enable)
    enabled_path = os.path.join(enabled_bundles_dir, to_enable)
    if os.access(enabled_path, os.F_OK):
        raise ValueError("Bundle already enabled: %s" % to_enable)

    os.symlink(available_path, enabled_path)
    print "Bundle %s enabled" % to_enable


@register_command()
def disable(to_disable, available_bundles_dir, enabled_bundles_dir, **kwargs):
    enabled_bundles = get_bundles(enabled_bundles_dir)
    if to_disable not in enabled_bundles:
        raise ValueError("Selected bundle is not enabled: %s" % to_disable)

    enabled_path = os.path.join(enabled_bundles_dir, to_disable)
    os.remove(enabled_path)
    print "Bundle %s disabled" % to_disable


def command_argparser(command):
    def decorator(parser_builder):
        command.get_argparser = parser_builder
        return parser_builder
    return decorator


@command_argparser(disable)
def disable_argparser():
    p = argparse.ArgumentParser()
    p.add_argument('to_disable')
    return p


@command_argparser(enable)
def enable_argparser():
    p = argparse.ArgumentParser()
    p.add_argument('to_enable')
    return p


class BundleManager(object):

    def __init__(self, action, vim_dir=None, **kwargs):
        self.action = action

        kwargs['vim_dir'] = vim_dir or get_vim_path()
        kwargs['available_bundles_dir'] = os.path.join(kwargs['vim_dir'],
                AVAILABLE_BUNDLES_DIRNAME)
        kwargs['enabled_bundles_dir'] = os.path.join(kwargs['vim_dir'],
                ENABLED_BUNDLES_DIRNAME)

        self._kwargs = kwargs

    def perform_action(self):
        return self.action(**self._kwargs)

    @staticmethod
    def get_action(cmd_name):
        return get_action_by_name(cmd_name)


def main():
    main_parser = argparse.ArgumentParser(
            description='Vim bundles management utility', add_help=False)
    main_parser.add_argument('action', action='store',
            type=BundleManager.get_action)
    main_parser.add_argument('--config', dest='config_path', action='store',
            default=get_default_config_path())
    main_parser.add_argument('--vimdir', dest='vim_dir', action='store',
            default=get_vim_path())

    parsed_args, rest_args = main_parser.parse_known_args()
    if hasattr(parsed_args.action, 'get_argparser'):
        command_argparser = parsed_args.action.get_argparser()
        command_argparser.parse_args(args=rest_args, namespace=parsed_args)
    else:
        argparse.ArgumentParser().parse_args(rest_args)

    manager = BundleManager(**parsed_args.__dict__)

    try:
        manager.perform_action()
    except BaseException, e:
        print e


if __name__ == '__main__':
    main()
